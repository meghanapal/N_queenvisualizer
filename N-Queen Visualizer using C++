#include <iostream>
#include <vector>

using namespace std;


void printBoard(const vector<vector<int>>& board) {
    int N = board.size();
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (board[i][j])
                cout << "Q ";
            else
                cout << ". ";
        }
        cout << endl;
    }
    cout << endl;
}


bool isSafe(const vector<vector<int>>& board, int row, int col) {
    int N = board.size();
    
    for (int i = 0; i < row; i++)
        if (board[i][col])
            return false;
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;
    for (int i = row, j = col; i >= 0 && j < N; i--, j++)
        if (board[i][j])
            return false;

    return true;
}

bool solveNQueensUtil(vector<vector<int>>& board, int row) {
    int N = board.size();
    if (row == N) {
        printBoard(board);
        return true;
    }

    bool success = false;
    for (int col = 0; col < N; col++) {
        if (isSafe(board, row, col)) {
            board[row][col] = 1;  // Place the queen
            success = solveNQueensUtil(board, row + 1) || success; 
            board[row][col] = 0;  // Backtrack
        }
    }
    return success;
}

void solveNQueens(int N) {
    vector<vector<int>> board(N, vector<int>(N, 0)); 
    if (!solveNQueensUtil(board, 0))
        cout << "No solution exists for N = " << N << endl;
}

int main() {
    int N;
    cout << "Enter the value of N: ";
    cin >> N;
    solveNQueens(N);
    return 0;
}
